#!/bin/bash

DEB_BASE="
apache2-utils
ca-certificates
dish
ethtool
fail2ban
ipcalc
libexpat1
libopenssl-ruby
memcached
mime-support
nginx-full
ntp
p7zip
pssh
rsync
ssl-cert
wwwconfig-common
"

GEM_BASE="
rack
thin
"

if anyattr gui; then
	cry "Bu bir masaüstü sistem gibi görünüyor. " \
	    "Böyle bir sisteme sunucu kurmamalısınız."
	if ! yesno "Yine de devam edilsin mi?" h; then
		cry "Güzel!"
		exit
	fi
fi

sudoattempt

# Debian'a özgü depoları ekle
added=2
case "$(lsb_release -s -i 2>/dev/null ||:)" in
[Dd]ebian)
	# Backports deposu
	distribution=$(lsb_release -s -c 2>/dev/null ||:)
	if [ -n "$distribution" ]; then
		adddebrepository \
			"backports" \
			"backports.debian.org/debian-backports" \
			"${distribution}-backports" \
			"main" || let added--
	else
		let added--
	fi
	# Dotdeb deposu
	adddebrepository \
		"dotdeb" \
		"packages.dotdeb.org" \
		- \
		"all" \
		"www.dotdeb.org/dotdeb.gpg" || let added--
	;;
esac

if [ $added -gt 0 ] || [ -z "$HAS_APT_UPDATED" ]; then
	say "Paket indeksleri güncelleniyor..."
	xaptget update ||:
fi

installdebs "Gerekli Deb paketleri kuruluyor" $DEB_BASE
installgems "Gerekli Gem paketleri kuruluyor" $GEM_BASE

#-------------------------------------------------------------------------------
# Thin servis betiği
#-------------------------------------------------------------------------------

NAME=thin
CONFDIR=/etc/$NAME

conffile=/etc/init.d/$NAME
while [ ! -f "$conffile" ]; do
	DAEMON=
	for v in "1.9.1" ""; do
		for d in /usr/local/bin /var/lib/gems/1.9.1/bin; do
			if [ -x "${d}/${NAME}${v}" ]; then
				DAEMON="${d}/${NAME}${v}"
				break
			fi
		done
	done

	[ -n "$DAEMON" ] || break

	sudo sh -c "sed -e 's/^\t\t//' >$conffile" <<EOF
		#!/bin/sh
		### BEGIN INIT INFO
		# Provides:          thin
		# Required-Start:    \$local_fs \$remote_fs
		# Required-Stop:     \$local_fs \$remote_fs
		# Default-Start:     2 3 4 5
		# Default-Stop:      0 1 6
		# Short-Description: thin initscript
		# Description:       thin
		### END INIT INFO

		# Original author: Forrest Robertson
		# Modified by: Recai Oktaş

		# Do NOT "set -e"

		DAEMON=$DAEMON
		NAME=$NAME
		CONFDIR=$CONFDIR

		# Exit if the package is not installed
		[ -x "\$DAEMON" ] || exit 0

		case "\$1" in
		start)
			\$DAEMON start --all \$CONFDIR
			;;
		stop)
			\$DAEMON stop --all \$CONFDIR
			;;
		restart|force-reload|reload)
			\$DAEMON restart --all \$CONFDIR
			;;
		*)
			echo "Usage: service \$NAME {start|stop|restart}" >&2
			exit 3
			;;
		esac
EOF
	sudo sh <<-EOS
		chmod +x $conffile
		update-rc.d $NAME defaults
		mkdir -p $CONFDIR
	EOS
	cry "Thin uygulama sunucusu yapılandırmaları '$CONFDIR'" \
	    "dizininde tutulacak.  Lütfen yapılandırmaları bu dizinde" \
	    "oluşturarak uygulama sunucusunu başlatın: service $NAME start"
	break
done

#-------------------------------------------------------------------------------
# Nginx yapılandırması için şablonlar
#-------------------------------------------------------------------------------

NGINXDIR=/etc/nginx
[ -d "$NGINXDIR" ] || die "Nginx kurulu görünmüyor"

conffile=$NGINXDIR/common.conf
if [ ! -f "$conffile" ]; then
	sudo sh -c "sed -e 's/^\t\t//' >$conffile" <<'EOF'
		# öntanımlı indeksler
		index index.html index.htm index.php;

		# logları kirleten bazı botları reddet
		if ($http_user_agent ~* (Baiduspider|Morfeus\ strikes)) {
			return 444;
		}

		# nokta dosyalar daima gizli olmalı
		location ~ /\. {
			deny all;
		}

		# logları kirleten script-kiddie istekleri
		location ~* /(phpmyadmin|php-my-admin)/ {
			deny all;
		}

		# sahte refererları reddet
		if ($http_referer ~* (babes|click|diamond|forsale|girl|jewelry|love|nudit|organic|poker|porn|poweroversoftware|sex|teen|video|webcam|zippo)) {
			return 444;
		}

		# bakım kipi - kök dizinde .503 dosyası varsa sistem bakımda
		if ( -f $document_root/.503) {
			return 503;
		}

		# robot dosyası yoksa logları kirletme
		location = /robots.txt {
			log_not_found off;
		}

		# debian paket deposu sunuyorsak loglar kirlenmesin
		location ~ /debian/.*(/i18n/Translation-|\.diff/Index).*$ {
			log_not_found off;
		}

		# standart www yönlendirmesi
		if ($host ~* www\.(.*)) {
			set $x_host_without_www $1;
			rewrite ^(.*)$ http://$x_host_without_www$1 permanent;
		}

		# ssl hazırlığı
		set $x_https "off";
		if ($http_x_forwarded_proto = "https") {
			set $x_https "on";
		}
		if ($server_port = "443") {
			set $x_https "on";
		}

		# php hangi dosyalarda etkin?
		location ~ \.(php|phtml)$ {
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME $request_filename;
			fastcgi_param  HTTPS $x_https;
			fastcgi_param GEOIP_COUNTRY_CODE $geoip_country_code;
			fastcgi_param GEOIP_COUNTRY_NAME $geoip_country_name;
			include fastcgi_params;
		}
EOF
fi
conffile=$NGINXDIR/sites-available/default
sudo sh -c "sed -e 's/^\t\t//' >$conffile" <<'EOF'
		# uygulama sunucusu
		upstream appserver {
			server 0.0.0.0:3000;
		}
		server {
			listen 80;
			# http://foo.bar.baz formunda bir servis için şu şekilde yapılandırın:
			# 	server_name .foo.bar.baz
			server_name localhost;
			root /srv/www/$host/site/public;

			include common.conf;

			location / {
				proxy_set_header  X-Real-IP  $remote_addr;
				proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
				proxy_set_header Host $http_host;
				proxy_redirect off;

				if (-f $request_filename/index.html) {
					rewrite (.*) $1/index.html break;
				}

				if (-f $request_filename.html) {
					rewrite (.*) $1.html break;
				}

				if (!-f $request_filename) {
					proxy_pass http://appserver;
					break;
				}
			}
		}
		server {
			listen 443;
			# http://foo.bar.baz formunda bir servis için şu şekilde yapılandırın:
			# 	server_name .foo.bar.baz
			server_name localhost;
			root /srv/www/$host/site/public;

			# ssl on;
			# ssl_certificate /etc/ssl/private/site.crt;
			# ssl_certificate_key /etc/ssl/private/site.key;

			include common.conf;

			location / {
				proxy_set_header  X-Real-IP  $remote_addr;
				proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
				proxy_set_header Host $http_host;
				proxy_redirect off;

				if (-f $request_filename/index.html) {
					rewrite (.*) $1/index.html break;
				}

				if (-f $request_filename.html) {
					rewrite (.*) $1.html break;
				}

				if (!-f $request_filename) {
					proxy_pass http://appserver;
					break;
				}
			}
		}
EOF
sudo sh <<-EOS
	cd $NGINXDIR/sites-enabled
	ln -sf ../sites-available/default
EOS

cry "Nginx için $NGINXDIR/sites-enabled/default örnek yapılandırması" \
    "oluşturuldu; lütfen yapılandırmayı tamamlayın."
